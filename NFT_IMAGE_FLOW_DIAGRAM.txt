# NFT Image Retrieval Flow Diagram

## File: /Users/exe/Downloads/Cursor/RollNFTs-Frontend/NFT_IMAGE_FLOW_DIAGRAM.txt

═══════════════════════════════════════════════════════════════════════════════
                        NFT IMAGE RETRIEVAL SYSTEM
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│                          STEP 1: BLOCKCHAIN QUERY                           │
└─────────────────────────────────────────────────────────────────────────────┘

    Frontend / API Call
           ↓
    POST /api/sync/blockchain
    { "syncNFTs": true, "collectionId": "awesome5-core..." }
           ↓
    ┌──────────────────────────────┐
    │  Coreum Blockchain REST API  │
    │ https://full-node.mainnet... │
    └──────────────────────────────┘
           ↓
    GET /coreum/asset/nft/v1/classes
           ↓
    ┌────────────────────────────┐
    │  Collection Class Data:    │
    │  - id: "awesome5-core..."  │
    │  - name: "Awesome NFTs"    │
    │  - uri: "ipfs://Qm..."     │ ← IMPORTANT!
    │  - data: "{...}"           │
    └────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                      STEP 2: FETCH COLLECTION METADATA                      │
└─────────────────────────────────────────────────────────────────────────────┘

    Collection URI: "ipfs://QmXYZ123..."
           ↓
    Convert to HTTP Gateway URL
           ↓
    "https://gateway.pinata.cloud/ipfs/QmXYZ123..."
           ↓
    ┌──────────────────────────────┐
    │      Fetch Metadata JSON     │
    │   (fetchMetadataFromURI)     │
    └──────────────────────────────┘
           ↓
    ┌────────────────────────────────────┐
    │  Collection Metadata (JSON):       │
    │  {                                 │
    │    "name": "Awesome NFTs",         │
    │    "description": "Cool NFTs",     │
    │    "image": "ipfs://QmABC...",    │ ← COLLECTION IMAGE!
    │    "banner_image": "ipfs://Qm...", │
    │    "external_url": "https://..."   │
    │  }                                 │
    └────────────────────────────────────┘
           ↓
    ┌────────────────────────────────────┐
    │   Store in Database:               │
    │   collections.cover_image          │
    └────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                       STEP 3: FETCH NFTs IN COLLECTION                      │
└─────────────────────────────────────────────────────────────────────────────┘

    ┌──────────────────────────────┐
    │  Coreum Blockchain REST API  │
    └──────────────────────────────┘
           ↓
    GET /cosmos/nft/v1beta1/nfts?class_id=awesome5-core...
           ↓
    ┌─────────────────────────────────┐
    │  NFT Data (for each NFT):       │
    │  - id: "nft_001"                │
    │  - owner: "core1abc..."         │
    │  - uri: "ipfs://QmNFT..."       │ ← IMPORTANT!
    │  - data: "{...}" (optional)     │
    └─────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                       STEP 4: FETCH NFT METADATA (FOR EACH NFT)             │
└─────────────────────────────────────────────────────────────────────────────┘

    For each NFT:
    
    NFT URI: "ipfs://QmNFT123..."
           ↓
    Convert to HTTP Gateway URL
           ↓
    "https://gateway.pinata.cloud/ipfs/QmNFT123..."
           ↓
    ┌──────────────────────────────┐
    │      Fetch Metadata JSON     │
    │   (fetchMetadataFromURI)     │
    └──────────────────────────────┘
           ↓
    ┌────────────────────────────────────┐
    │  NFT Metadata (JSON):              │
    │  {                                 │
    │    "name": "Cool NFT #1",          │
    │    "description": "First NFT",     │
    │    "image": "ipfs://QmIMG...",    │ ← NFT IMAGE!
    │    "attributes": [                 │
    │      {"trait": "Rarity", "value": "Rare"} │
    │    ]                               │
    │  }                                 │
    └────────────────────────────────────┘
           ↓
    ┌────────────────────────────────────┐
    │   Store in Database:               │
    │   nfts.image                       │
    │   nfts.metadata (JSONB)            │
    └────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                      STEP 5: DISPLAY IN FRONTEND                            │
└─────────────────────────────────────────────────────────────────────────────┘

    User visits Collections page
           ↓
    Frontend fetches: GET /api/collections
           ↓
    ┌──────────────────────────────────┐
    │  collections table               │
    │  - cover_image: "ipfs://QmABC..." │
    └──────────────────────────────────┘
           ↓
    CollectionCard.jsx
           ↓
    ipfsToHttp(collection.cover_image)
           ↓
    Convert "ipfs://QmABC..." to "https://gateway.pinata.cloud/ipfs/QmABC..."
           ↓
    <img src="https://gateway.pinata.cloud/ipfs/QmABC..." />
           ↓
    ✅ Collection Image Displayed!

    ─────────────────────────────────────

    User clicks collection → Goes to Collection Detail page
           ↓
    Frontend fetches: GET /api/nfts/collection/:collectionId
           ↓
    ┌──────────────────────────────────┐
    │  nfts table                      │
    │  - image: "ipfs://QmIMG..."      │
    │  - metadata: { "name": "...", ...}│
    └──────────────────────────────────┘
           ↓
    NFTCard.jsx (for each NFT)
           ↓
    ipfsToHttp(nft.image)
           ↓
    Convert "ipfs://QmIMG..." to "https://gateway.pinata.cloud/ipfs/QmIMG..."
           ↓
    <img src="https://gateway.pinata.cloud/ipfs/QmIMG..." />
           ↓
    ✅ NFT Images Displayed!

═══════════════════════════════════════════════════════════════════════════════
                          IPFS GATEWAY CONVERSION
═══════════════════════════════════════════════════════════════════════════════

File: src/utils/ipfs.js

    Input                           →   Output
    ─────────────────────────────────────────────────────────────────────────
    
    "ipfs://QmXYZ..."               →   "https://gateway.pinata.cloud/ipfs/QmXYZ..."
    
    "QmXYZ..."                      →   "https://gateway.pinata.cloud/ipfs/QmXYZ..."
    
    "https://other.com/image.png"   →   "https://other.com/image.png"
                                        (no conversion needed)

    With Fallback Gateways:
    1. ✅ gateway.pinata.cloud      (Primary - most reliable)
    2. ✅ cloudflare-ipfs.com       (Fallback 1)
    3. ✅ ipfs.io                   (Fallback 2)
    4. ✅ dweb.link                 (Fallback 3)

═══════════════════════════════════════════════════════════════════════════════
                          DATABASE SCHEMA
═══════════════════════════════════════════════════════════════════════════════

┌────────────────────────────────────┐
│  collections                       │
├────────────────────────────────────┤
│  id (UUID)                         │
│  collection_id (TEXT) UNIQUE       │ ← "awesome5-core..."
│  name                              │
│  cover_image                       │ ← "ipfs://QmABC..."
│  banner_image                      │
│  metadata_uri                      │ ← Original blockchain URI
│  synced_from_blockchain (BOOL)    │ ← true
│  last_synced_at (TIMESTAMP)       │
└────────────────────────────────────┘

┌────────────────────────────────────┐
│  nfts                              │
├────────────────────────────────────┤
│  id (UUID)                         │
│  collection_id (TEXT)              │ ← References collections.collection_id
│  token_id (TEXT)                   │ ← "nft_001"
│  name                              │
│  image                             │ ← "ipfs://QmIMG..."
│  metadata (JSONB)                  │ ← Full metadata JSON
│  metadata_uri                      │ ← Original blockchain URI
│  owner_address                     │
│  synced_from_blockchain (BOOL)    │ ← true
│  last_synced_at (TIMESTAMP)       │
└────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════════════════
                          TESTING WORKFLOW
═══════════════════════════════════════════════════════════════════════════════

1. List Collections
   ↓
   $ node test-nft-images.js list
   ↓
   📦 Found 15 collections:
   1. awesome5-core1eg7...
      Name: Awesome NFTs
      Has URI: ✅
   
2. Test Specific Collection
   ↓
   $ node test-nft-images.js awesome5-core1eg7...
   ↓
   ═══════════════════════════════════════
   Testing Collection: awesome5-core1eg7...
   ═══════════════════════════════════════
   
   📦 Collection Info:
     Name: Awesome NFTs
     URI: ipfs://QmXYZ...
   
   🔄 Fetching metadata from URI...
   ✅ URI Metadata:
     { "name": "...", "image": "ipfs://..." }
   
   🖼️  Collection Image URL: ipfs://QmABC...
   
   ───────────────────────────────────────
   Testing NFTs in Collection
   ───────────────────────────────────────
   
   NFT #1: nft_001
     Token ID: nft_001
     URI: ipfs://QmNFT...
   
   🔄 Fetching metadata from URI...
   ✅ URI Metadata:
     { "name": "Cool NFT #1", "image": "ipfs://QmIMG..." }
   
   🖼️  NFT Image URL: ipfs://QmIMG...
   ✅ Image is accessible (image/png)

3. Sync to Database
   ↓
   $ curl -X POST http://localhost:5173/api/sync/blockchain \
     -d '{"syncNFTs": true, "collectionId": "awesome5-core1eg7..."}'
   ↓
   {
     "success": true,
     "collections": 1,
     "nfts": 10,
     "message": "Synced 1 collections and 10 NFTs from blockchain"
   }

4. Verify in Database
   ↓
   $ psql -d your_db -c "SELECT token_id, name, image FROM nfts LIMIT 5;"
   ↓
    token_id  |     name      |         image
   -----------+---------------+------------------------
    nft_001   | Cool NFT #1   | ipfs://QmIMG...
    nft_002   | Cool NFT #2   | ipfs://QmDEF...
    ...

5. Check Frontend
   ↓
   Visit http://localhost:5173/collections
   ↓
   ✅ Collection cards show cover images
   ↓
   Click collection → Collection detail page
   ↓
   ✅ NFT cards show NFT images

═══════════════════════════════════════════════════════════════════════════════
                          TROUBLESHOOTING FLOWCHART
═══════════════════════════════════════════════════════════════════════════════

    Images not showing?
           │
           ├─→ Run: node test-nft-images.js <collection-id>
           │
           ├─→ ✅ Images accessible?
           │   │
           │   ├─→ YES → Check database: SELECT image FROM nfts LIMIT 5
           │   │         │
           │   │         ├─→ Empty? → Run sync: POST /api/sync/blockchain
           │   │         │              with {"syncNFTs": true}
           │   │         │
           │   │         └─→ Has data? → Check frontend console for errors
           │   │                          Verify ipfsToHttp() conversion
           │   │
           │   └─→ NO → Check IPFS gateway
           │             │
           │             ├─→ Try different gateway in .env:
           │             │   VITE_IPFS_GATEWAY=https://ipfs.io/ipfs/
           │             │
           │             └─→ Check firewall/network blocking IPFS
           │
           ├─→ ❌ No metadata URI?
           │   │
           │   └─→ NFTs don't have metadata on blockchain
           │       Must manually upload metadata or re-mint with metadata
           │
           └─→ ⚠️ Metadata has no image field?
               │
               └─→ Check metadata format with test script
                   Update parseNFTData() to handle custom format

═══════════════════════════════════════════════════════════════════════════════
                          KEY FILES REFERENCE
═══════════════════════════════════════════════════════════════════════════════

1. Blockchain Sync Service
   📁 src/services/blockchainSyncService.js
   ┣━ fetchMetadataFromURI()     - Fetches JSON from IPFS
   ┣━ parseClassToCollection()   - Converts blockchain class to collection
   ┗━ parseNFTData()              - Converts blockchain NFT to database format

2. Sync API Endpoint
   📁 api/sync/blockchain.js
   ┣━ POST /api/sync/blockchain  - Main sync endpoint
   ┣━ Options: syncNFTs, collectionId
   ┗━ Calls Coreum REST API

3. IPFS Utilities
   📁 src/utils/ipfs.js
   ┣━ ipfsToHttp()               - Converts IPFS URI to HTTP URL
   ┣━ preloadIpfsImage()         - Preloads with fallback gateways
   ┗━ getIpfsGatewayUrls()       - Gets all gateway URLs

4. Frontend Components
   📁 src/components/NFTCard.jsx
   ┗━ Displays NFT with image via ipfsToHttp()
   
   📁 src/components/CollectionCard.jsx
   ┗━ Displays collection with cover image

5. API Endpoints
   📁 api/collections/[id].js    - Get collection by ID
   📁 api/nfts/collection/[collectionId].js - Get NFTs by collection

6. Testing
   📁 test-nft-images.js         - Test and verify NFT images

═══════════════════════════════════════════════════════════════════════════════

